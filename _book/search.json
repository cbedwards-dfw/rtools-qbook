[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rtools-qbook",
    "section": "",
    "text": "Preface\nThis is a quarto book to organize R tools."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "The FRAM team at WDFW tackles a diverse array of analysis, data processing, simulation, and communication tasks. This book is intended to organize information about key R tools, especially packages, that streamline our work or extend our capabilities. This is a living document that will continue to grow as we identify or develop new tools."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "other_resources.html",
    "href": "other_resources.html",
    "title": "8  Other resources",
    "section": "",
    "text": "Point to snippets."
  },
  {
    "objectID": "communication.html#plotting",
    "href": "communication.html#plotting",
    "title": "4  Communication",
    "section": "4.1 Plotting",
    "text": "4.1 Plotting\n\n4.1.1 ggpp\nThe ggpp package allows natural placement of text in ggplots based on position within frame instead of variable values. This is an extension to the Grammar of Graphics (r-project.org).\nThe key function here is geom_text_npc, as in this example:\n\ndf.lab = tibble(x = c(\"left\", \"right\"), y = c(\"top\", \"bottom\"), \n                label = c(\"High power,\\nlow displacement\", \"Low power, high displacement\"))\ngp1 = ggplot(mtcars, aes (x = disp, y = hp, col = as.factor(cyl)))+\n         geom_point()+\n  theme_bw()+\n  geom_text_npc(data = df.lab, aes(npcx = x, npcy = y, label = label))\ngp1\n\n\n\n\nThe big advantage here is that the text is placed based on the window rather than x or y coordinates, so changinge the data or x or Y limits doesn’t screw up text placement in relation to the window.\n\ngp1 + ylim(c(-100, NA))\n\n\n\n\nWhen adding text directly (not from dataframe), ggpp overwrites the annotate function to support natural placement.\n\ngp1 + \n  ylim(c(-100, NA))+\n  annotate(geom = \"text_npc\",\n           npcx = \"left\",\n           npcy = \"bottom\",\n           label = \"New text\")\n\n\n\n\nggpp is also great to inset tables (geom_table()), plots (geom_plot()) or images (geom_grob()) within each plot.\nOne way to inset a table with geom_table(), which takes a tibble in which one object is itself a list of the desired table contents. This feels a little fiddly to me, but probably scales up well when making many figures.\n\ndf = mtcars |&gt; \n  group_by(cyl) |&gt; \n  summarize(n = n())\ndf.inset = tibble(x = 400, y = 300, tb = list(df))\nggplot(mtcars, aes (x = disp, y = hp, col = as.factor(cyl)))+\n         geom_point()+\n  geom_table(data = df.inset, aes(label = tb, x = x, y = y))+\n  theme_bw()\n\n\n\n\nWe can also control this more “naturally” with the overwritten annotate function – no need to make a tibble containing a tibble or specify locations in absolute x and y coordinates.\n\nggplot(mtcars, aes (x = disp, y = hp, col = as.factor(cyl)))+\n         geom_point()+\n  annotate(\"table_npc\", npcx = \"right\", npcy = \"top\", label = df)+\n  theme_bw()\n\n\n\n\nThis same annotate approach can be used to add a plot inset into the figure. Make the inset plot and assign it to a variable, then use annotate with “plot_npc” like so:\n\ngp.inset = ggplot(mtcars, aes(x = mpg, y = hp))+\n  geom_point()+geom_smooth()+\n  theme_bw()\nggplot(mtcars, aes (x = disp, y = hp, col = as.factor(cyl)))+\n         geom_point()+\n  annotate(\"table_npc\", npcx = \"right\", npcy = \"top\", label = df)+\n  annotate(\"plot_npc\", npcx = \"left\", npcy = \"top\", label = gp.inset)+\n  theme_bw()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n4.1.2 ggrepel\nThe ggrepel package can be used to annotate data points using repultsion to minimize point overlap.\nThe problem:\n\ndat = mtcars |&gt; \n  head(10)\ndat$name = rownames(dat)\nggplot(dat, aes(x = disp, y = hp, col = as.factor(cyl)))+\n  geom_point()+\n  geom_text(aes(label = name), col = 'black')\n\n\n\n\nThe solution:\n\nggplot(dat, aes(x = disp, y = hp, col = as.factor(cyl)))+\n  geom_point()+\n  geom_text_repel(aes(label = name), col = 'black')\n\n\n\n\n\n\n4.1.3 Custom labeling\nSometimes we want to add content to ggplot in different layers, but have a legend that correctly represents these layers. The solution is to add the desired graphical setting (e.g., color, shape, etc) in the aes() call of each layer, and assign a character atomic to that argument. This will then distinguish the graphical setting just like when we assign a character vector column of the dataframe to the graphical argumnet. The lab() function can be used to give a meaningful legend title, and the standard modification functions (e.g. scale_color_manual) can be used to specify the colors (or shape, or size, etc) associated with each layer.\n\nggplot(mpg, aes(displ, hwy)) + \n  geom_point() + \n  geom_smooth(aes(color = \"loess\"), method = \"loess\", se = FALSE)+\n  geom_smooth(aes(color = \"gam\"), method = \"gam\", se = FALSE)+\n  labs(color = \"method\")\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "communication.html#interactives",
    "href": "communication.html#interactives",
    "title": "4  Communication",
    "section": "4.2 Interactives",
    "text": "4.2 Interactives"
  },
  {
    "objectID": "communication.html#tables",
    "href": "communication.html#tables",
    "title": "4  Communication",
    "section": "4.3 Tables",
    "text": "4.3 Tables"
  },
  {
    "objectID": "communication.html#flowcharts",
    "href": "communication.html#flowcharts",
    "title": "4  Communication",
    "section": "4.4 Flowcharts",
    "text": "4.4 Flowcharts\nQuarto has built-in support for generating flow charts and other diagrams from markdown. See here: Quarto - Diagrams. This uses mermaid and/or GraphViz. For live building of these tools, see:\n\nOnline FlowChart & Diagrams Editor - Mermaid Live Editor\nGraphviz Online (dreampuf.github.io)\n\nHere’s the default chart of the mermaid live editor as an example\n\n\n\n\nflowchart TD\n    A[Christmas] --&gt;|Get money| B(Go shopping)\n    B --&gt; C{Let me think}\n    C --&gt;|One| D[Laptop]\n    C --&gt;|Two| E[iPhone]\n    C --&gt;|Three| F[fa:fa-car Car]"
  },
  {
    "objectID": "interactive_interfaces.html#overview",
    "href": "interactive_interfaces.html#overview",
    "title": "9  Interactive interfaces",
    "section": "9.1 Overview",
    "text": "9.1 Overview\nThe FRAM team often needs to present relatively large sets of data to stake-holders who may be interested only in specific subsets of the data. By providing interactive interfaces, we add functionality to our presentations of the data as well as allowing users to customize the presentation to their needs.\n\n9.1.1 Quick note on sharing interactive .html files\nThe tools described below are easier to implement locally (running in Rstudio on your own computer and exploring in the viewer) than including in a compiled in a quarto or Rmarkdown .html file. By default quarto and Rmarkdown will create html files that rely on additional files present on your local machine. The compiled document will look good on your computer, but when you share it with others they won’t be able to view the interactive figures or tables. This has definitely not been hugely frustrating.\nWe can fix this behavior by including two additional arguments in the YAML header of our Rmarkdown or quarto file: embed-resources: true as a sub-argument to format: html, and standalone: true as an independent argument. These setting produce a self-sufficient document that can be emailed or shared in Teams and viewed on other computers. Here’s the entire YAML header for a functional document.\ntitle: \"Presenting data interactively\"\nauthor: \"Collin Edwards\"\nformat: \n  html:\n  embed-resources: true\nstandalone: true"
  },
  {
    "objectID": "interactive_interfaces.html#tables",
    "href": "interactive_interfaces.html#tables",
    "title": "9  Interactive interfaces",
    "section": "9.2 Tables",
    "text": "9.2 Tables\nWe can use the gt package to generate and customize tables. See https://gt.rstudio.com/articles/gt.html for an introduction to all the customization options. We’ll use the built-in mtcars data for this example, adding in an explicit column for the car names (mtcars uses rownames for that), and we’ll keep the table formatting to the default.\n\n9.2.1 Non-interactive table\nWe can quickly make a fairly pretty table with gt(). There are many options to improve readability and customize the figures, including adding headers, grouping sets of columns together with “spanner” labels, and adding footnotes. Footnotes in particular seem great, as we can use them to clarify column names within the table itself (rather than relying on users reading associated text in the main body of a document).\n\ndat &lt;- mtcars |&gt; \n  mutate(car = rownames(mtcars)) |&gt; \n  relocate(car, .before = \"mpg\")\ndat |&gt; \n  gt()\n\n\n\n\n\n  \n    \n      car\n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    Mazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n    Mazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n    Datsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n    Hornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n    Hornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n    Valiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n    Duster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n    Merc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n    Merc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n    Merc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n    Merc 280C\n17.8\n6\n167.6\n123\n3.92\n3.440\n18.90\n1\n0\n4\n4\n    Merc 450SE\n16.4\n8\n275.8\n180\n3.07\n4.070\n17.40\n0\n0\n3\n3\n    Merc 450SL\n17.3\n8\n275.8\n180\n3.07\n3.730\n17.60\n0\n0\n3\n3\n    Merc 450SLC\n15.2\n8\n275.8\n180\n3.07\n3.780\n18.00\n0\n0\n3\n3\n    Cadillac Fleetwood\n10.4\n8\n472.0\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4\n    Lincoln Continental\n10.4\n8\n460.0\n215\n3.00\n5.424\n17.82\n0\n0\n3\n4\n    Chrysler Imperial\n14.7\n8\n440.0\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\n    Fiat 128\n32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\n    Honda Civic\n30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\n    Toyota Corolla\n33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\n    Toyota Corona\n21.5\n4\n120.1\n97\n3.70\n2.465\n20.01\n1\n0\n3\n1\n    Dodge Challenger\n15.5\n8\n318.0\n150\n2.76\n3.520\n16.87\n0\n0\n3\n2\n    AMC Javelin\n15.2\n8\n304.0\n150\n3.15\n3.435\n17.30\n0\n0\n3\n2\n    Camaro Z28\n13.3\n8\n350.0\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\n    Pontiac Firebird\n19.2\n8\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\n    Fiat X1-9\n27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n1\n1\n4\n1\n    Porsche 914-2\n26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n    Lotus Europa\n30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n    Ford Pantera L\n15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\n    Ferrari Dino\n19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\n    Maserati Bora\n15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n    Volvo 142E\n21.4\n4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n  \n  \n  \n\n\n\n\n\n\n9.2.2 Interactive table\nThe static table above works – and we can make it prettier with additional options – but the table is long and it can be clunky to compare individual cars or look for all the cars with the highest horsepower. Interactive tables provide solutions for this!\nWe can make a gt table interactive by piping it into the opt_interactive() function. opt_interactive() has optional arguments to tweak what things are interactive (e.g., do we want to include filtering? Searching? etc). This tutorial provides a decent explanation: https://posit.co/blog/new-in-gt-0-9-0-interactive-tables/. Here is the default interactivity, which includes sorting by columns (click the column headers) and splitting into different pages.\n\ndat |&gt; \n  gt() |&gt; \n  opt_interactive()\n\n\n\n\n\n\n\n\n\n\n\n9.2.3 Interactive table, extra options\nHere we change the defaults on interactivity to add searching, filters, resizing columns, highlighting the row the mouse hovers over, and choosing the number of rows displayed at a time.\n\ndat |&gt; \n  gt() |&gt; \n  opt_interactive(\n    use_search = TRUE,\n    use_filters = TRUE,\n    use_resizers = TRUE,\n    use_highlight = TRUE,\n    use_page_size_select = TRUE\n  )"
  },
  {
    "objectID": "interactive_interfaces.html#figures",
    "href": "interactive_interfaces.html#figures",
    "title": "9  Interactive interfaces",
    "section": "9.3 Figures",
    "text": "9.3 Figures\nggplot figures can be made interactive by calling ggplotly() from the plotly library on a ggplot object. Again we will demonstrate this with mtcars, plotting the displacement against gross horsepower, coloring by the number of cylinders.\n\n9.3.1 Non-interactive figure\nWe’ll add some basic labeling and formatting, but this plot a relatively common example of using ggplot. For simplicity in the next step, we’ll assign our plot to an object, and view that object.\n\ngp = ggplot(dat, aes(x = disp, y = hp, col = as.factor(cyl)))+\n  geom_point(size = 3)+\n  labs(col = \"Cylinders\")+\n  xlab(\"displacement (cubic in.)\")+\n  ylab(\"horsepower\")+\n  theme_bw(base_size = 14)\ngp\n\n\n\n\n\n\n9.3.2 Interactive figure\nWhile the static figure is fine, it can be hard to distinguish points that are close together, and we can’t get precise values for individual points. We can make the figure interactive just by feeding it into ggplotly. This allows us to see details of points when we hover over them, as well as zoom in or out, and handle some other convenience features.\n\nggplotly(gp)\n\n\n\n\n\nPlotly looks like it provides a rich suite of additional features for interactivity, but most of those features are beyond my current understanding. However, one incredibly powerful tool for clarifying figures is to change the hover-over tooltip to include additional information. For example, here we might want the hover to identify the individual cars.\nConveniently, this is easy to do with ggplotly. First, we add additional arguments in our aes call using arbitrary names. These arguments should include any additional information we want included in the hover-over. Here, I add a text argument which holds the car information. By default, ggplotly includes all aes terms in the hover-over, even if they’re not actually used in the plot otherwise.\n\ngp = ggplot(dat, aes(x = disp, y = hp, col = as.factor(cyl),\n                     text = car))+\n  geom_point(size = 3)+\n  labs(col = \"Cylinders\")+\n  xlab(\"displacement (cubic in.)\")+\n  ylab(\"horsepower\")+\n  theme_bw(base_size = 14)\nggplotly(gp)\n\n\n\n\n\nIf we want the hover text to include only a subset of the terms in aes we can use the tooltip argument in ggplotly. We specify the hover text using the variable names in our aes call, not the variables of our dataframe.\n\ngp = ggplot(dat, aes(x = disp, y = hp, col = as.factor(cyl), text = car))+\n  geom_point(size = 3)+\n  labs(col = \"Cylinders\")+\n  xlab(\"displacement (cubic in.)\")+\n  ylab(\"horsepower\")+\n  theme_bw(base_size = 14)\nggplotly(gp, tooltip = c(\"text\", \"x\", \"y\"))\n\n\n\n\n\nNote that there is a long-standing bug (still present as of 6/28/24) in which the order of text in the hover-over cannot be controlled with ggplotly as its supposed to be. There is a workaround described here: https://github.com/plotly/plotly.R/issues/849."
  },
  {
    "objectID": "interactive_interfaces.html#trelliscopejs-interactive-facet_wrap",
    "href": "interactive_interfaces.html#trelliscopejs-interactive-facet_wrap",
    "title": "9  Interactive interfaces",
    "section": "9.4 trelliscopejs: interactive facet_wrap",
    "text": "9.4 trelliscopejs: interactive facet_wrap\nWe sometimes want to visualize plots for each fishery or each stock (or other situations where we want sub-plots representing different categories). The ggplot function facet_wrap is a fantastic tool for this kind of problem, but becomes less useful when the number of subplots reaches the point that they’re hard to visualize on a single screen. We’ll use the life expectancy data from the gapminder package to illustrate this.\n\n9.4.1 Single plot\nAs a starting point let’s look at a single panel of our eventual plot: visualizing the US life expectancy through time. We’ll add some basic labels and theming, but keep the figure simple.\n\nggplot(gapminder |&gt; filter(country == \"United States\"),\n       aes(x = year, y = lifeExp))+\n  geom_path()+\n  xlab(\"Year\")+\n  ylab(\"Life expenctancy\")+\n  ggtitle(\"USA\")+\n  theme_bw(base_size = 14)\n\n\n\n\n\n\n9.4.2 facet_wrap working well\nWhat if we want to look at countries in continental North and Central America? One option is to use a single plot, with different colors for each country\n\ncountries.interest = c(\"United States\", \"Canada\", \"Mexico\",\n                       \"Guatemala\", \"Honduras\", \"El Salvador\",\n                       \"Nicaragua\", \"Costa Rica\", \"Panama\")\nggplot(gapminder |&gt; filter(country %in% countries.interest),\n       aes(x = year, y = lifeExp, col = country))+\n  geom_path()+\n  xlab(\"Year\")+\n  ylab(\"Life expenctancy\")+\n  ggtitle(\"North and Central America\")+\n  theme_bw(base_size = 14)\n\n\n\n\nThis is nice for looking at overall trends, but it can be hard to focus on individual countries. We can use facet_wrap instead of coloring by country to break this up.\n\nggplot(gapminder |&gt; filter(country %in% countries.interest),\n       aes(x = year, y = lifeExp))+\n  geom_path()+\n  facet_wrap(~ country)+\n  xlab(\"Year\")+\n  ylab(\"Life expenctancy\")+\n  ggtitle(\"North and Central America\")+\n  theme_bw(base_size = 13)\n\n\n\n\nNow we can easily focus on patterns of individual countries. For example, we can see the dip in El Salvador in the 70s and 80s, which may reflect conditions in the lead up to and during the Salvadoran Civil War (1979-1992). We could not easily distinguish details like this by overlaying colored lines.\nfacet_wrap is often my go-to solution for plotting trends across fisheries or stock.\n\n\n9.4.3 facet_wrap breaking down\nBut if we want to view facets for every country, we don’t really have room.\n\nggplot(gapminder,\n       aes(x = year, y = lifeExp))+\n  geom_path()+\n  facet_wrap(~ country)+\n  xlab(\"Year\")+\n  ylab(\"Life expenctancy\")+\n  ggtitle(\"All countries\")+\n  theme_bw(base_size = 14)\n\n\n\n\nOne option is to break the full data set into meaningful chunks, and plot each one as a separate faceted figure. Here we might make a plot for each continent. However, there is another option!\n\n\n9.4.4 trelliscopejs for interactivity\nWith trelliscopejs, we can replace facet_wrap with facet_trelliscope. This takes a little while to run, but creates an incredibly flexible dashboard. In grid users can decide how many panels to show at once; in sort users can choose to sort by different criteria (for example, continent and then country). Perhaps most powerfully, users can use the filter section to specify individual countries to show, allowing users to make side-by-side comparisons of any set of countries they desire.\n\nggplot(gapminder,\n       aes(x = year, y = lifeExp))+\n  geom_path()+\n  facet_trelliscope(~ country, path = '.', self_contained = TRUE)+\n  xlab(\"Year\")+\n  ylab(\"Life expenctancy\")+\n  ggtitle(\"\")+\n  theme_bw(base_size = 14)\n\nusing data from the first layer\n\n\n\n\n\n\n\n\n9.4.4.1 Including in a quarto or Rmarkdown file.\nNote that when embedding a trelliscopejs figure in quarto or rmarkdown, it appears that the default path argument (NULL) causes an error. Setting path = '.' fixes this (as I did above).\nAdditionally, the default settings lead to an html document that relies on additional files which are created in the same folder as the .html file. Sharing the html without the additional files means the trelliscope visualization will not work. To create a stand-alone html file, we need to add the argument self_contained = TRUE to our facet_trelliscope call."
  },
  {
    "objectID": "interactive_interfaces.html#bonus-sparkline-and-friends-from-gtextras",
    "href": "interactive_interfaces.html#bonus-sparkline-and-friends-from-gtextras",
    "title": "9  Interactive interfaces",
    "section": "9.5 BONUS: Sparkline and friends from gtExtras",
    "text": "9.5 BONUS: Sparkline and friends from gtExtras\nWith some fiddling, we can actually include tiny figures within tables using the gtExtras package. Here we use that for the first gapminder. This is just a quick demo – see the details here: https://jthomasmock.github.io/gtExtras/articles/plotting-with-gtExtras.html. Here we’ll plot change in life expectancy over time and the general distribution of population size for each country within the period covered in the data.\n\ndat.gm = gapminder |&gt; \n  dplyr::arrange(year) |&gt; \n  group_by(continent, country) |&gt; \n  summarize(continent = continent[1],\n            country = country[1],\n            mean_gdp_percapita = mean(gdpPercap),\n            lifeExp = list(lifeExp),\n            dist_of_pop_size = list(pop)\n  )\n\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n\ngt(head(dat.gm, 20)) |&gt; \n  gt_plt_sparkline(lifeExp) |&gt; \n  gt_plt_dist(dist_of_pop_size, type = \"density\") |&gt; \n  fmt_number(mean_gdp_percapita, decimals = 0) |&gt; \n  opt_interactive()\n\n\n\n\n\n\n\n\n\nNote that the lineplot for lifeExp is just showing the change sequentially – this would not work as intended if our data were not sorted by year, or if we had gaps in the years. There are a plethora of additional in-table plot options, including histograms and barplots."
  },
  {
    "objectID": "package_stubs.html",
    "href": "package_stubs.html",
    "title": "10  Package stubs",
    "section": "",
    "text": "Placeholder / storage for new content to add"
  },
  {
    "objectID": "framverse.html#framrsquared",
    "href": "framverse.html#framrsquared",
    "title": "7  FRAMverse and related tools",
    "section": "7.1 framrsquared",
    "text": "7.1 framrsquared\nThis package (https://github.com/FRAMverse/framrsquared) provides R functions to interface with FRAM databases, including extracting tables, filtering data, plotting, and even (carefully) modifying the database. Ty Garber is the primary developer of this package.\nThis package can be installed with devtools or the pak package:\ndevtools::install_github(\"FRAMverse/framrsquared\")\n\n# Alternatively \npak::pkg_install(\"FRAMverse/framrsquared\")\nThe package home page has a good introduction to the package. The following is a brief summary.\n\n7.1.1 Key functions:\n\n\n\n\n\n\n\nFunction\nUse\n\n\n\n\nconnect_fram_db()\ncreate connection to database\n\n\ndisconnect_fram_db()\ndisconnect from database\n\n\nfetch_table()\nextracts a given table from the database and returns it as an augmented tibble.\n\n\n\n\n\n7.1.2 Auditing functions:\n\n\n\n\n\n\n\nFunction\nUse\n\n\n\n\ncompare_fishery_inputs()\nCompares the fishery inputs between two runs\n\n\ncompare_recruits()\ncompares the recruits between two runs\n\n\ncompare_non_retention_inputs()\nCompares non-retention inputs between two runs\n\n\ncompare_stock_fishery_rate_scalers()\nCompares stock fishery rate scalers\n\n\ncompare_runs()\nGenerates a report to the console of each of the above\n\n\nbkfram_checks()\nRuns a series of checks when carrying out backwards fram\n\n\n\n\n\n7.1.3 Functions to recreate FRAM reports:\n\n\n\n\n\n\n\nFunction\nScreen recreated\n\n\n\n\nmsf_mortalities()\nMSF number of mortalities\n\n\nmsf_encounters ()\nMSF number of encounters\n\n\nmsf_landed_catch()\nMSF number of landed catch\n\n\npopulation_statistics()\nPopulations statistics\n\n\nstock_mortality()\nFishery Mortality\n\n\n\n\n\n7.1.4 Filter functions:\n\n\n\nFunction\nFilters to…\n\n\n\n\nfilter_sport()\nSport fisheries\n\n\nfilter_net()\nNet fisheries\n\n\nfilter_puget_sound()\nPuget Sound fisheries\n\n\nfilter_coast()\nCoastal fisheries\n\n\nfilter_marine()\nMarine fisheries\n\n\nfilter_wa()\nWashington state fisheries\n\n\nfilter_bc()\nCanadian fisheries\n\n\nfilter_ak()\nAlaska fisheries\n\n\nfilter_or()\nOregon fisheries\n\n\nfilter_ca()\nCalifornia fisheries\n\n\n\n\n\n7.1.5 Plotting functions:\n\n\n\n\n\n\n\nFunction\nPlots…\n\n\n\n\nplot_stock_mortality()\nBar chart of top mortalities per fishery\n\n\nplot_stock_mortality_time_step()\n… separated by timestep\n\n\ncompare_inputs_chart()\nVisualize changes in inputs between two runs (takes output of compare_inputs()"
  },
  {
    "objectID": "framverse.html#section",
    "href": "framverse.html#section",
    "title": "7  FRAMverse and related tools",
    "section": "7.2 ",
    "text": "7.2"
  },
  {
    "objectID": "framverse.html#tammsupport",
    "href": "framverse.html#tammsupport",
    "title": "7  FRAMverse and related tools",
    "section": "7.2 TAMMsupport",
    "text": "7.2 TAMMsupport\nThis package (https://github.com/cbedwards-dfw/TAMMsupport) provides R tools for interacting with TAMM files, including summarizing TAMMs, comparing TAMMs, and extracting key tables. Collin Edwards is the primary developer of this package.\nThis package can be installed with devtools or the pkg package.\ndevtools::install_github(\"cbedwards-dfw/TAMMsupport\")\n\n# Alternatively \npak::pkg_install(\"cbedwards-dfw/TAMMsupport\")\n\n7.2.1 Key functions:\n\n\n\n\n\n\n\nFunction\nUse\n\n\n\n\ntamm_diff()\ncompares two tamm files and outputs an excel file with diff-like results\n\n\ntamm_report()\nsummarizes key aspects of a single TAMM file in an html report, including tables and figures\n\n\ntamm_compare()\nGenerates comparison of two or more TAMM files, using similar elements to the tamm_report()\n\n\n\n\n\n7.2.2 extracting and using data\n\n\n\n\n\n\n\nFunction\nUse\n\n\n\n\nread_limiting_stock()\nReads the limiting stock complete sheet of the TAMM file and handles some simple filtering and formatting\n\n\nclean_limiting_stock()\nLike read_limiting_stock(), but filters to unmarked natural, removes AEQ entries, and pivots to longform. Useful for plotting\n\n\nfilter_tamm_wa_chin()\nFilters data fram to washington fisheries based on a fishery_id column, using Chinook id numbers)\n\n\nfilter_tamm_wa_coho()\nAs filter_tamm_wa_chin(), but based on Coho id numbers\n\n\n\n\n\n7.2.3 Lookup tables\nTo simplify translating between ID numbers and names, the TAMMsupport package includes dataframes with columns for stock or fishery id and corresponding names, as well as timestep designations.\n\n\n\n\n\n\n\ndataframe name\nUseful for working with…\n\n\n\n\nstock_chinook_fram\nChinook stock names and ids\n\n\nstock_coho_fram\nCoho stock names and ids\n\n\nfishery_chinook_fram\nChinook fishery names and ids\n\n\nfishery_coho_fram\nCoho fishery names and ids\n\n\ntimestep_chinook_fram\nChinook timesteps\n\n\ntimestep_coho_fram\nCoho timesteps"
  },
  {
    "objectID": "framverse.html#extracting-and-using-data",
    "href": "framverse.html#extracting-and-using-data",
    "title": "7  FRAMverse and related tools",
    "section": "7.3 extracting and using data",
    "text": "7.3 extracting and using data\n\n\n\n\n\n\n\nFunction\nUse\n\n\n\n\nread_limiting_stock()\nReads the limiting stock complete sheet of the TAMM file and handles some simple filtering and formatting\n\n\nclean_limiting_stock()\nLike read_limiting_stock(), but filters to unmarked natural, removes AEQ entries, and pivots to longform. Useful for plotting\n\n\nfilter_tamm_wa_chin()\nFilters data fram to washington fisheries based on a fishery_id column, using Chinook id numbers)\n\n\nfilter_tamm_wa_coho()\nAs filter_tamm_wa_chin(), but based on Coho id numbers\n\n\n\n\n7.3.1 Lookup tables\nTo simplify translating between ID numbers and names, the TAMMsupport package includes dataframes with columns for stock or fishery id and corresponding names, as well as timestep designations.\n\n\n\n\n\n\n\ndataframe name\nUseful for working with…\n\n\n\n\nstock_chinook_fram\nChinook stock names and ids\n\n\nstock_coho_fram\nCoho stock names and ids\n\n\nfishery_chinook_fram\nChinook fishery names and ids\n\n\nfishery_coho_fram\nCoho fishery names and ids\n\n\ntimestep_chinook_fram\nChinook timesteps\n\n\ntimestep_coho_fram\nCoho timesteps"
  },
  {
    "objectID": "framverse.html#xldiff",
    "href": "framverse.html#xldiff",
    "title": "7  FRAMverse and related tools",
    "section": "7.3 xldiff",
    "text": "7.3 xldiff\nIn developing the TAMMsupport package, we discovered there was no reliable R framework for comparing two excel sheets with identical structures but potentially different entries in individual cells. Collin Edwards developed the xldiff package https://github.com/cbedwards-dfw/xldiff to remedy this. The package readme page has thorough documentation of the applications. This package is designed for quick and easy comparisons of individual sheets with excel_diff or as a framework for the development of other tools or packages (e.g., TAMMsupport)."
  },
  {
    "objectID": "framverse.html#snippets",
    "href": "framverse.html#snippets",
    "title": "7  FRAMverse and related tools",
    "section": "7.4 Snippets",
    "text": "7.4 Snippets\nThe snippets repository (https://github.com/FRAMverse/snippets) is a storage place for miscellaneous code chunks that might be worth re-using. These include some command-line examples, VB macros, a range of R functions and example code, Quarto and Rmarkdown headers, and the template excel file for summarizing mortality from FRAM databases. The github home page includes an index for all functions and files (possibly excluding recent additions)."
  }
]